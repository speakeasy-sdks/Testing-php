<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Testing\petstore;

class Pet 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a new pet to the store
     * 
     * Add a new pet to the store
     * 
     * @param \Testing\petstore\Models\Shared\Pet $request
     * @param \Testing\petstore\Models\Operations\AddPetFormSecurity $security
     * @return \Testing\petstore\Models\Operations\AddPetFormResponse
     */
	public function addPetForm(
        \Testing\petstore\Models\Shared\Pet $request,
        \Testing\petstore\Models\Operations\AddPetFormSecurity $security,
    ): \Testing\petstore\Models\Operations\AddPetFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\AddPetFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pet = $serializer->deserialize((string)$httpResponse->getBody(), 'Testing\petstore\Models\Shared\Pet', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
        }

        return $response;
    }
	
    /**
     * Add a new pet to the store
     * 
     * Add a new pet to the store
     * 
     * @param \Testing\petstore\Models\Shared\Pet $request
     * @param \Testing\petstore\Models\Operations\AddPetJsonSecurity $security
     * @return \Testing\petstore\Models\Operations\AddPetJsonResponse
     */
	public function addPetJson(
        \Testing\petstore\Models\Shared\Pet $request,
        \Testing\petstore\Models\Operations\AddPetJsonSecurity $security,
    ): \Testing\petstore\Models\Operations\AddPetJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\AddPetJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pet = $serializer->deserialize((string)$httpResponse->getBody(), 'Testing\petstore\Models\Shared\Pet', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
        }

        return $response;
    }
	
    /**
     * Add a new pet to the store
     * 
     * Add a new pet to the store
     * 
     * @param string $request
     * @param \Testing\petstore\Models\Operations\AddPetRawSecurity $security
     * @return \Testing\petstore\Models\Operations\AddPetRawResponse
     */
	public function addPetRaw(
        string $request,
        \Testing\petstore\Models\Operations\AddPetRawSecurity $security,
    ): \Testing\petstore\Models\Operations\AddPetRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\AddPetRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pet = $serializer->deserialize((string)$httpResponse->getBody(), 'Testing\petstore\Models\Shared\Pet', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
        }

        return $response;
    }
	
    /**
     * Deletes a pet
     * 
     * @param \Testing\petstore\Models\Operations\DeletePetRequest $request
     * @param \Testing\petstore\Models\Operations\DeletePetSecurity $security
     * @return \Testing\petstore\Models\Operations\DeletePetResponse
     */
	public function deletePet(
        \Testing\petstore\Models\Operations\DeletePetRequest $request,
        \Testing\petstore\Models\Operations\DeletePetSecurity $security,
    ): \Testing\petstore\Models\Operations\DeletePetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet/{petId}', \Testing\petstore\Models\Operations\DeletePetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\DeletePetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Finds Pets by status
     * 
     * Multiple status values can be provided with comma separated strings
     * 
     * @param \Testing\petstore\Models\Operations\FindPetsByStatusRequest $request
     * @param \Testing\petstore\Models\Operations\FindPetsByStatusSecurity $security
     * @return \Testing\petstore\Models\Operations\FindPetsByStatusResponse
     */
	public function findPetsByStatus(
        \Testing\petstore\Models\Operations\FindPetsByStatusRequest $request,
        \Testing\petstore\Models\Operations\FindPetsByStatusSecurity $security,
    ): \Testing\petstore\Models\Operations\FindPetsByStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet/findByStatus');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Testing\petstore\Models\Operations\FindPetsByStatusRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\FindPetsByStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Testing\petstore\Models\Shared\Pet>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Finds Pets by tags
     * 
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * 
     * @param \Testing\petstore\Models\Operations\FindPetsByTagsRequest $request
     * @param \Testing\petstore\Models\Operations\FindPetsByTagsSecurity $security
     * @return \Testing\petstore\Models\Operations\FindPetsByTagsResponse
     */
	public function findPetsByTags(
        \Testing\petstore\Models\Operations\FindPetsByTagsRequest $request,
        \Testing\petstore\Models\Operations\FindPetsByTagsSecurity $security,
    ): \Testing\petstore\Models\Operations\FindPetsByTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet/findByTags');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Testing\petstore\Models\Operations\FindPetsByTagsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\FindPetsByTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Testing\petstore\Models\Shared\Pet>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Find pet by ID
     * 
     * Returns a single pet
     * 
     * @param \Testing\petstore\Models\Operations\GetPetByIdRequest $request
     * @param \Testing\petstore\Models\Operations\GetPetByIdSecurity $security
     * @return \Testing\petstore\Models\Operations\GetPetByIdResponse
     */
	public function getPetById(
        \Testing\petstore\Models\Operations\GetPetByIdRequest $request,
        \Testing\petstore\Models\Operations\GetPetByIdSecurity $security,
    ): \Testing\petstore\Models\Operations\GetPetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet/{petId}', \Testing\petstore\Models\Operations\GetPetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\GetPetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pet = $serializer->deserialize((string)$httpResponse->getBody(), 'Testing\petstore\Models\Shared\Pet', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Updates a pet in the store with form data
     * 
     * @param \Testing\petstore\Models\Operations\UpdatePetWithFormRequest $request
     * @param \Testing\petstore\Models\Operations\UpdatePetWithFormSecurity $security
     * @return \Testing\petstore\Models\Operations\UpdatePetWithFormResponse
     */
	public function updatePetWithForm(
        \Testing\petstore\Models\Operations\UpdatePetWithFormRequest $request,
        \Testing\petstore\Models\Operations\UpdatePetWithFormSecurity $security,
    ): \Testing\petstore\Models\Operations\UpdatePetWithFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet/{petId}', \Testing\petstore\Models\Operations\UpdatePetWithFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Testing\petstore\Models\Operations\UpdatePetWithFormRequest::class, $request, null));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\UpdatePetWithFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 405) {
        }

        return $response;
    }
	
    /**
     * Update an existing pet
     * 
     * Update an existing pet by Id
     * 
     * @param \Testing\petstore\Models\Shared\Pet $request
     * @param \Testing\petstore\Models\Operations\UpdatePetFormSecurity $security
     * @return \Testing\petstore\Models\Operations\UpdatePetFormResponse
     */
	public function updatePetForm(
        \Testing\petstore\Models\Shared\Pet $request,
        \Testing\petstore\Models\Operations\UpdatePetFormSecurity $security,
    ): \Testing\petstore\Models\Operations\UpdatePetFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\UpdatePetFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pet = $serializer->deserialize((string)$httpResponse->getBody(), 'Testing\petstore\Models\Shared\Pet', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405) {
        }

        return $response;
    }
	
    /**
     * Update an existing pet
     * 
     * Update an existing pet by Id
     * 
     * @param \Testing\petstore\Models\Shared\Pet $request
     * @param \Testing\petstore\Models\Operations\UpdatePetJsonSecurity $security
     * @return \Testing\petstore\Models\Operations\UpdatePetJsonResponse
     */
	public function updatePetJson(
        \Testing\petstore\Models\Shared\Pet $request,
        \Testing\petstore\Models\Operations\UpdatePetJsonSecurity $security,
    ): \Testing\petstore\Models\Operations\UpdatePetJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\UpdatePetJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pet = $serializer->deserialize((string)$httpResponse->getBody(), 'Testing\petstore\Models\Shared\Pet', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405) {
        }

        return $response;
    }
	
    /**
     * Update an existing pet
     * 
     * Update an existing pet by Id
     * 
     * @param string $request
     * @param \Testing\petstore\Models\Operations\UpdatePetRawSecurity $security
     * @return \Testing\petstore\Models\Operations\UpdatePetRawResponse
     */
	public function updatePetRaw(
        string $request,
        \Testing\petstore\Models\Operations\UpdatePetRawSecurity $security,
    ): \Testing\petstore\Models\Operations\UpdatePetRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/xml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\UpdatePetRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pet = $serializer->deserialize((string)$httpResponse->getBody(), 'Testing\petstore\Models\Shared\Pet', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405) {
        }

        return $response;
    }
	
    /**
     * uploads an image
     * 
     * @param \Testing\petstore\Models\Operations\UploadFileRequest $request
     * @param \Testing\petstore\Models\Operations\UploadFileSecurity $security
     * @return \Testing\petstore\Models\Operations\UploadFileResponse
     */
	public function uploadFile(
        \Testing\petstore\Models\Operations\UploadFileRequest $request,
        \Testing\petstore\Models\Operations\UploadFileSecurity $security,
    ): \Testing\petstore\Models\Operations\UploadFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pet/{petId}/uploadImage', \Testing\petstore\Models\Operations\UploadFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Testing\petstore\Models\Operations\UploadFileRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->_language, $this->_sdkVersion, $this->_genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Testing\petstore\Models\Operations\UploadFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Testing\petstore\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
}